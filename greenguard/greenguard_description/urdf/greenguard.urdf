<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from greenguard.urdf.xacro          | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="greenguard">
  <!-- This is an example of a URDF. -->
  <!-- As we move through the file, new things to note will be pointed out. -->
  <!-- It's not meant an example of GOOD design, but an example of some of the various features of URDF/xacro. -->
  <!-- This file is not a robot in and of itself, it just contains some useful tags that could be included in any robot -->
  <!-- Specify some colours -->
  <material name="white">
    <color rgba="1 1 1 1"/>
  </material>
  <material name="orange">
    <color rgba="1 0.3 0.1 1"/>
  </material>
  <material name="blue">
    <color rgba="0.2 0.2 1 1"/>
  </material>
  <!-- Specify some standard inertial calculations https://en.wikipedia.org/wiki/List_of_moments_of_inertia -->
  <!-- These make use of xacro's mathematical functionality -->
  <link name="dummy_link">
    <!-- KDL doesn't support first link with inertia, so we create a dummy link-->
    <origin rpy="0.0 0.0 0.0" xyz="0.0 0.0 0.26666666666666666"/>
  </link>
  <joint name="dummy_joint" type="fixed">
    <parent link="dummy_link"/>
    <child link="base_link"/>
  </joint>
  <link name="base_link">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0.1"/>
      <geometry>
        <box size="0.5 0.35 0.2"/>
      </geometry>
      <material name="orange"/>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0.1"/>
      <geometry>
        <box size="0.5 0.35 0.2"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0.1"/>
      <mass value="12"/>
      <inertia ixx="0.16249999999999998" ixy="0.0" ixz="0.0" iyy="0.29000000000000004" iyz="0.0" izz="0.3725"/>
    </inertial>
  </link>
  <link name="front_right_wheel_link">
    <visual>
      <geometry>
        <cylinder length="0.05" radius="0.1"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.05" radius="0.1"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 1.5707963267948966 0" xyz="0.025 0 0"/>
      <mass value="1.0"/>
      <inertia ixx="0.002708333333333334" ixy="0.0" ixz="0.0" iyy="0.002708333333333334" iyz="0.0" izz="0.005000000000000001"/>
    </inertial>
  </link>
  <joint name="front_right_wheel_joint" type="continuous">
    <parent link="base_link"/>
    <child link="front_right_wheel_link"/>
    <origin rpy="1.5707963267948966 1.5707963267948966 0" xyz="0.25 0.175 0.06666666666666667"/>
    <limit effort="100" lower="-3.141592653589793" upper="3.141592653589793" velocity="100"/>
    <axis xyz="0 0 1"/>
  </joint>
  <link name="front_left_wheel_link">
    <visual>
      <geometry>
        <cylinder length="0.05" radius="0.1"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.05" radius="0.1"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 1.5707963267948966 0" xyz="0.025 0 0"/>
      <mass value="1.0"/>
      <inertia ixx="0.002708333333333334" ixy="0.0" ixz="0.0" iyy="0.002708333333333334" iyz="0.0" izz="0.005000000000000001"/>
    </inertial>
  </link>
  <joint name="front_left_wheel_joint" type="continuous">
    <parent link="base_link"/>
    <child link="front_left_wheel_link"/>
    <origin rpy="1.5707963267948966 1.5707963267948966 0" xyz="0.25 -0.175 0.06666666666666667"/>
    <limit effort="100" lower="-3.141592653589793" upper="3.141592653589793" velocity="100"/>
    <axis xyz="0 0 1"/>
  </joint>
  <link name="rear_right_wheel_link">
    <visual>
      <geometry>
        <cylinder length="0.05" radius="0.1"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.05" radius="0.1"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 1.5707963267948966 0" xyz="0.025 0 0"/>
      <mass value="1.0"/>
      <inertia ixx="0.002708333333333334" ixy="0.0" ixz="0.0" iyy="0.002708333333333334" iyz="0.0" izz="0.005000000000000001"/>
    </inertial>
  </link>
  <joint name="rear_right_wheel_joint" type="continuous">
    <parent link="base_link"/>
    <child link="rear_right_wheel_link"/>
    <origin rpy="1.5707963267948966 1.5707963267948966 0" xyz="-0.25 0.175 0.06666666666666667"/>
    <limit effort="100" lower="-3.141592653589793" upper="3.141592653589793" velocity="100"/>
    <axis xyz="0 0 1"/>
  </joint>
  <link name="rear_left_wheel_link">
    <visual>
      <geometry>
        <cylinder length="0.05" radius="0.1"/>
      </geometry>
    </visual>
    <collision>
      <geometry>
        <cylinder length="0.05" radius="0.1"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 1.5707963267948966 0" xyz="0.025 0 0"/>
      <mass value="1.0"/>
      <inertia ixx="0.002708333333333334" ixy="0.0" ixz="0.0" iyy="0.002708333333333334" iyz="0.0" izz="0.005000000000000001"/>
    </inertial>
  </link>
  <joint name="rear_left_wheel_joint" type="continuous">
    <parent link="base_link"/>
    <child link="rear_left_wheel_link"/>
    <origin rpy="1.5707963267948966 1.5707963267948966 0" xyz="-0.25 -0.175 0.06666666666666667"/>
    <limit effort="100" lower="-3.141592653589793" upper="3.141592653589793" velocity="100"/>
    <axis xyz="0 0 1"/>
  </joint>
  <!-- camera_joint describes where the camera is relative to the arm -->
  <!-- - Even though the camera isn't moving relative to the arm, it will probably be helpful to have its own link/frame rather than just adding more visuals to the arm -->
  <!-- - For this example, the camera_link origin will be at the centre of the camera's "sensor" -->
  <joint name="camera_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0.25 0 0.30000000000000004"/>
    <parent link="base_link"/>
    <child link="camera_link"/>
  </joint>
  <!-- camera_link describes the camera at the end of the arm -->
  <!-- - It has multiple visual elements, which ultimately get combined together -->
  <!-- - Even if we specify different materials, RViz will just colour them all the same as the first -->
  <!-- - Although we could also specify multiple collision geometries, instead we just use a single box that encompasses the whole camera -->
  <link name="camera_link">
    <visual>
      <origin rpy="0 0 0" xyz="-0.03 0 0"/>
      <geometry>
        <box size="0.06 0.15 0.1"/>
      </geometry>
      <material name="white"/>
    </visual>
    <visual>
      <origin rpy="0 1.5707963267948966 0" xyz="0.03 0 0"/>
      <geometry>
        <cylinder length="0.06" radius="0.04"/>
      </geometry>
      <material name="blue"/>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0.0 0 0"/>
      <geometry>
        <box size="0.12 0.15 0.1"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0.0 0 0"/>
      <mass value="0.1"/>
      <inertia ixx="0.000375" ixy="0.0" ixz="0.0" iyy="0.0003075" iyz="0.0" izz="0.0003075"/>
    </inertial>
  </link>
  <!-- This file demonstrates the use of some <gazebo> tags -->
  <!-- To include it add the following line -->
  <!-- <xacro:include filename="example_gazebo.xacro" /> -->
  <!-- Gazebo is unable to use the same <material> tags that are already in the URDF (that RViz uses). -->
  <!-- Instead, we need to add gazebo tags for our links that refer to Gazebo materials -->
  <gazebo reference="base_link">
    <material>Gazebo/Green</material>
  </gazebo>
  <gazebo reference="camera_link">
    <material>Gazebo/Blue</material>
  </gazebo>
  <!-- Gazebo requires the use of plugins to interact with other systems such as ROS. -->
  <!-- This plugin will publish the joint_states for the selected joints 
            (which robot_state_publisher can then use to broadcast the approprate tf). -->
  <gazebo>
    <plugin filename="libgazebo_ros_joint_state_publisher.so" name="gazebo_ros_joint_state_publisher">
      <update_rate>30</update_rate>
      <joint_name>front_right_wheel_joint</joint_name>
      <joint_name>front_left_wheel_joint</joint_name>
      <joint_name>rear_right_wheel_joint</joint_name>
      <joint_name>rear_left_wheel_joint</joint_name>
    </plugin>
  </gazebo>
  <!-- This plugin will read a JointTrajectory message from the /set_joint_trajectory topic 
            and move the machine accordingly. It's a bit clunky but it works. -->
  <!-- You'll probably want to add damping to the joints to stop them it flopping around. 
            e.g. <dynamics damping="10.0" friction="10.0"/> -->
  <!-- Here's an example message to publish to test it:
            ros2 topic pub -1 /set_joint_trajectory trajectory_msgs/msg/JointTrajectory  '{header: {frame_id: world}, joint_names: [slider_joint, arm_joint], points: [  {positions: {0.8,0.6}} ]}' -->
  <gazebo>
    <plugin filename="libgazebo_ros_joint_pose_trajectory.so" name="gazebo_ros_joint_pose_trajectory">
      <update_rate>2</update_rate>
    </plugin>
  </gazebo>
  <!-- The next section shows an example of adding a sensor, in this case a depth camera. -->
  <!-- Due to a quirk of how cameras work, an extra joint/link is required to create an
            "optical frame" for the sensor. That isn't the focus for this tutorial, but you can
            look at https://www.ros.org/reps/rep-0103.html#suffix-frames for slightly more information. -->
  <!-- First, create the link and joint for the optical frame -->
  <joint name="camera_optical_joint" type="fixed">
    <origin rpy="-1.571 0 -1.571" xyz="0 0 0"/>
    <parent link="camera_link"/>
    <child link="camera_link_optical"/>
  </joint>
  <link name="camera_link_optical"/>
  <!-- Add a gazebo tag for the ORIGINAL camera_link (but in the plugin we reference the optical frame so that ROS can orient things correctly) -->
  <!-- Within the gazebo tag we have the sensor tag, and inside that there is (among other things) the camera tag with the camera parameters, 
            and the plugin tag with some extra parameters the plugin needs. -->
  <!-- Note that although visualise is set to true, it won't actually visualise the depth camera in gazebo. To see the preview, 
            try swapping "depth" to "camera"-->
  <gazebo reference="camera_link">
    <sensor name="guard_cam" type="depth">
      <update_rate>20</update_rate>
      <visualize>true</visualize>
      <camera name="cam">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>B8G8R8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="camera_controller">
        <frame_name>camera_link_optical</frame_name>
        <min_depth>0.1</min_depth>
        <max_depth>500</max_depth>
      </plugin>
    </sensor>
  </gazebo>
  <gazebo>
    <plugin filename="libgazebo_ros_diff_drive.so" name="skid_steer_drive">
      <ros>
        <namespace>/greenguard</namespace>
      </ros>
      <!-- Number of wheel pairs -->
      <num_wheel_pairs>2</num_wheel_pairs>
      <!-- wheels0 -->
      <left_joint>front_left_wheel_joint</left_joint>
      <right_joint>front_right_wheel_joint</right_joint>
      <!-- wheels1-->
      <left_joint>rear_left_wheel_joint</left_joint>
      <right_joint>rear_right_wheel_joint</right_joint>
      <!-- kinematics -->
      <wheel_separation>0.4</wheel_separation>
      <wheel_separation>0.4</wheel_separation>
      <wheel_diameter>0.2</wheel_diameter>
      <wheel_diameter>0.2</wheel_diameter>
      <!-- limits -->
      <max_wheel_torque>10</max_wheel_torque>
      <max_wheel_acceleration>1.0</max_wheel_acceleration>
      <!-- output -->
      <publish_odom>true</publish_odom>
      <publish_odom_tf>true</publish_odom_tf>
      <publish_wheel_tf>true</publish_wheel_tf>
      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_link</robot_base_frame>
    </plugin>
  </gazebo>
</robot>
