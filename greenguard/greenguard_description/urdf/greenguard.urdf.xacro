<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro"  name="greenguard">

    <!-- This is an example of a URDF. -->
    <!-- As we move through the file, new things to note will be pointed out. -->
    <!-- It's not meant an example of GOOD design, but an example of some of the various features of URDF/xacro. -->

    <!-- This will include all the contents of example_include.xacro first. Go check it out! -->
    <xacro:include filename="greenguard_include.xacro" />

    <!-- base_link is a large rectangular plate. Some things to note: -->
    <!-- - We set the visual origin Z to half the box height, so that the link origin sits at the bottom of the box -->
    <!-- - We set the collision to be identical to the visual -->
    <!-- - We specified the colour manually (but still need to enter a name) -->
    <!-- - We specified all the inertial parameters manually -->
    <xacro:property name="base_x" value="0.50"/>
    <xacro:property name="base_y" value="0.35"/>
    <xacro:property name="base_z" value="0.20"/>

    <xacro:property name="wheel_radius" value="0.1"/>
    <xacro:property name="wheel_width" value="0.05"/>

    <xacro:property name="velocity" value="100"/>
    <xacro:property name="effort"   value="100"/>
    <xacro:property name="wheel_mass"   value="1"/>

    <xacro:macro name="wheel"  params="name x y z wheel_radius wheel_width velocity effort mass">
        <link name="${name}_wheel_link">
            <visual>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
                </geometry>
            </visual>
            <collision>
                <geometry>
                    <cylinder length="${wheel_width}" radius="${wheel_radius}" />
                </geometry>
            </collision>
            <xacro:inertial_cylinder mass="1.0" length="${wheel_width}" radius="${wheel_radius}">
                <origin xyz="${wheel_width/2} 0 0" rpy="0 ${pi/2} 0"/>
            </xacro:inertial_cylinder>
        </link>
        <joint name="${name}_wheel_joint" type="continuous">
            <parent link="base_link"/>
            <child link="${name}_wheel_link"/>
            <origin xyz="${x} ${y} ${z}" rpy="${pi/2} ${pi/2} 0"/>
            <limit lower="-${pi}" upper="${pi}" velocity="${velocity}" effort="${effort}"/> 
            <axis xyz="0 0 1"/>
        </joint>
    </xacro:macro>
    <!-- 
    <link name="dummy_link"> KDL doesn't support first link with inertia, so we create a dummy link
        <origin xyz="0.0 0.0 ${base_z*4/3}" rpy="0.0 0.0 0.0"/>
    </link>
    
    <joint name="dummy_joint" type="fixed">
        <parent link="dummy_link"/>
        <child link="base_link"/>
    </joint>
    -->
    <link name="base_link">
        <visual>
            <origin xyz="0 0 ${base_z/2}" rpy="0 0 0"/>
            <geometry>
                <box size="${base_x} ${base_y} ${base_z}" />
            </geometry>
            <material name="orange"/>
        </visual>
        <collision>
            <origin xyz="0 0 ${base_z/2}" rpy="0 0 0"/>
            <geometry>
                <box size="${base_x} ${base_y} ${base_z}" />
            </geometry>
        </collision>
        <xacro:inertial_box mass="12" x="${base_x} " y="${base_y} " z="${base_z} ">
            <origin xyz="0 0 ${base_z/2}" rpy="0 0 0"/>
        </xacro:inertial_box>
    </link>

    <xacro:wheel name="front_right" x="${base_x/2}" y="${base_y/2}" z="${base_z/3}" wheel_radius="${wheel_radius}" wheel_width="${wheel_width}" velocity="${velocity}" effort="${effort}" mass="${wheel_mass}"/>
    <xacro:wheel name="front_left" x="${base_x/2}" y="-${base_y/2}" z="${base_z/3}" wheel_radius="${wheel_radius}" wheel_width="${wheel_width}" velocity="${velocity}" effort="${effort}" mass="${wheel_mass}"/>
    <xacro:wheel name="rear_right" x="-${base_x/2}" y="${base_y/2}" z="${base_z/3}" wheel_radius="${wheel_radius}" wheel_width="${wheel_width}" velocity="${velocity}" effort="${effort}" mass="${wheel_mass}"/>
    <xacro:wheel name="rear_left" x="-${base_x/2}" y="-${base_y/2}" z="${base_z/3}" wheel_radius="${wheel_radius}" wheel_width="${wheel_width}" velocity="${velocity}" effort="${effort}" mass="${wheel_mass}"/>



    <!-- camera_joint describes where the camera is relative to the arm -->
    <!-- - Even though the camera isn't moving relative to the arm, it will probably be helpful to have its own link/frame rather than just adding more visuals to the arm -->
    <!-- - For this example, the camera_link origin will be at the centre of the camera's "sensor" -->
    <joint name="camera_joint" type="fixed">
        <origin xyz="${base_x/2} 0 ${base_z + base_z/2}" rpy="0 0 0"/>
        <parent link="base_link"/>
        <child link="camera_link"/>        
    </joint>


    <!-- camera_link describes the camera at the end of the arm -->
    <!-- - It has multiple visual elements, which ultimately get combined together -->
    <!-- - Even if we specify different materials, RViz will just colour them all the same as the first -->
    <!-- - Although we could also specify multiple collision geometries, instead we just use a single box that encompasses the whole camera -->
    <link name="camera_link">
        <visual>
            <origin xyz="-0.03 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="0.06 0.15 ${base_z/2}" />
            </geometry>
            <material name="white" />
        </visual>
        <visual>
            <origin xyz="0.03 0 0" rpy="0 ${pi/2} 0"/>
            <geometry>
                <cylinder length="0.06" radius="0.04" />
            </geometry>
            <material name="blue" />
        </visual>
        <collision>
            <origin xyz="0.0 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="0.12 0.15 ${base_z/2}" />
            </geometry>
        </collision>
        <xacro:inertial_box mass="0.1" x="0.12" y="0.15" z="0.15">
            <origin xyz="0.0 0 0" rpy="0 0 0"/>
        </xacro:inertial_box>
    </link>


    <xacro:include filename="greenguard_gazebo.xacro" />


</robot>
